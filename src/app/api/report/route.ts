import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseClient } from '../../../lib/database'
import { generateValuationPDF, generateBasicPDF } from '../../../lib/pdf-generator'
import '../../../app/startup' // Ensure database is initialized

export async function POST(request: NextRequest) {
  try {
    const { domain } = await request.json()
    
    if (!domain) {
      return NextResponse.json(
        { error: 'Domain is required' },
        { status: 400 }
      )
    }

    // Get latest appraisal for this domain from database
    let appraisalData = null
    try {
      const supabase = await getSupabaseClient()
      
      const { data: results, error } = await supabase
        .from('appraisals')
        .select('*')
        .eq('domain', domain)
        .order('created_at', { ascending: false })
        .limit(1)
      
      if (error) throw error
      
      appraisalData = results && results.length > 0 ? results[0] : null
    } catch (dbError) {
      console.error('Failed to fetch appraisal:', dbError)
    }

    // Generate PDF report
    const pdfBuffer = appraisalData ? generateValuationPDF(appraisalData) : generateBasicPDF(domain)

    return new NextResponse(pdfBuffer as BodyInit, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${domain}-valuation-report.pdf"`
      }
    })
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to generate report' },
      { status: 500 }
    )
  }
}

function generateDetailedReport(appraisal: any): string {
  const breakdown = JSON.parse(appraisal.breakdown)
  const priceEstimate = JSON.parse(appraisal.price_estimate)
  const comps = JSON.parse(appraisal.comps || '[]')
  
  return `
DOMAIN VALUATION REPORT
======================

Domain: ${appraisal.domain}
Generated: ${new Date(appraisal.created_at).toLocaleDateString()}
Final Score: ${appraisal.final_score.toFixed(1)}/100

PRICE ESTIMATE
--------------
Investor Price: ${priceEstimate.investor}
Retail Price: ${priceEstimate.retail}

${priceEstimate.explanation}

FACTOR BREAKDOWN
----------------
${breakdown.map((factor: any) => 
  `${factor.factor.toUpperCase()}: ${factor.score}/100 (Weight: ${(factor.weight * 100).toFixed(0)}%) - Contributes ${factor.contribution.toFixed(1)} points`
).join('\n')}

AI BRANDABILITY ANALYSIS
------------------------
${appraisal.ai_comment}

LEGAL STATUS
------------
Status: ${appraisal.legal_flag.toUpperCase()}

${comps.length > 0 ? `
COMPARABLE SALES
----------------
${comps.map((comp: any) => 
  `${comp.domain} - $${comp.soldPrice.toLocaleString()} (${comp.soldDate}) - Source: ${comp.source}`
).join('\n')}
` : ''}

This report was generated by the Domain Value Estimator AI system.
For the most current analysis, please visit the web interface.
`
}

function generateBasicReport(domain: string): string {
  return `
DOMAIN VALUATION REPORT
======================

Domain: ${domain}
Generated: ${new Date().toLocaleDateString()}

No recent valuation found for this domain.
Please run a new evaluation through the web interface.

This report was generated by the Domain Value Estimator AI system.
`
}