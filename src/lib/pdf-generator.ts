// PDF report generation for domain valuations
import jsPDF from 'jspdf'

export function generateValuationPDF(appraisal: any): Buffer {
  const doc = new jsPDF()
  
  // Title
  doc.setFontSize(20)
  doc.text('DOMAIN VALUATION REPORT', 20, 30)
  
  // Domain and basic info
  doc.setFontSize(12)
  doc.text(`Domain: ${appraisal.domain}`, 20, 50)
  doc.text(`Generated: ${new Date(appraisal.created_at).toLocaleDateString()}`, 20, 60)
  doc.text(`Final Score: ${appraisal.final_score.toFixed(1)}/100`, 20, 70)
  
  // Price estimate
  doc.setFontSize(14)
  doc.text('PRICE ESTIMATE', 20, 90)
  doc.setFontSize(12)
  
  const priceEstimate = JSON.parse(appraisal.price_estimate)
  doc.text(`Investor Price: ${priceEstimate.investor}`, 20, 105)
  doc.text(`Retail Price: ${priceEstimate.retail}`, 20, 115)
  
  // Split explanation text if too long
  const explanation = priceEstimate.explanation
  const lines = doc.splitTextToSize(explanation, 170)
  doc.text(lines, 20, 130)
  
  // Factor breakdown
  let yPos = 155
  doc.setFontSize(14)
  doc.text('FACTOR BREAKDOWN', 20, yPos)
  yPos += 15
  
  doc.setFontSize(10)
  const breakdown = JSON.parse(appraisal.breakdown)
  breakdown.forEach((factor: any) => {
    const text = `${factor.factor.toUpperCase()}: ${factor.score}/100 (Weight: ${(factor.weight * 100).toFixed(0)}%)`
    doc.text(text, 20, yPos)
    yPos += 10
    
    if (yPos > 270) { // Page break
      doc.addPage()
      yPos = 30
    }
  })
  
  // AI Analysis
  yPos += 10
  doc.setFontSize(14)
  doc.text('AI BRANDABILITY ANALYSIS', 20, yPos)
  yPos += 15
  
  doc.setFontSize(10)
  const aiCommentLines = doc.splitTextToSize(appraisal.ai_comment, 170)
  doc.text(aiCommentLines, 20, yPos)
  yPos += aiCommentLines.length * 5 + 10
  
  // Legal status
  doc.setFontSize(14)
  doc.text('LEGAL STATUS', 20, yPos)
  yPos += 15
  
  doc.setFontSize(10)
  doc.text(`Status: ${appraisal.legal_flag.toUpperCase()}`, 20, yPos)
  yPos += 15
  
  // Comparable sales if available
  const comps = JSON.parse(appraisal.comps || '[]')
  if (comps.length > 0) {
    if (yPos > 250) {
      doc.addPage()
      yPos = 30
    }
    
    doc.setFontSize(14)
    doc.text('COMPARABLE SALES', 20, yPos)
    yPos += 15
    
    doc.setFontSize(10)
    comps.forEach((comp: any) => {
      const compText = `${comp.domain} - $${comp.soldPrice.toLocaleString()} (${comp.soldDate}) - ${comp.source}`
      doc.text(compText, 20, yPos)
      yPos += 10
      
      if (yPos > 270) {
        doc.addPage()
        yPos = 30
      }
    })
  }
  
  // Footer
  if (yPos > 250) {
    doc.addPage()
    yPos = 30
  }
  
  yPos += 20
  doc.setFontSize(8)
  doc.text('This report was generated by the Domain Value Estimator AI system.', 20, yPos)
  doc.text('For the most current analysis, please visit the web interface.', 20, yPos + 10)
  
  // Convert to buffer
  const pdfBuffer = Buffer.from(doc.output('arraybuffer'))
  return pdfBuffer
}

export function generateBasicPDF(domain: string): Buffer {
  const doc = new jsPDF()
  
  doc.setFontSize(20)
  doc.text('DOMAIN VALUATION REPORT', 20, 30)
  
  doc.setFontSize(12)
  doc.text(`Domain: ${domain}`, 20, 50)
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 60)
  
  doc.text('No recent valuation found for this domain.', 20, 80)
  doc.text('Please run a new evaluation through the web interface.', 20, 90)
  
  doc.setFontSize(8)
  doc.text('This report was generated by the Domain Value Estimator AI system.', 20, 120)
  
  const pdfBuffer = Buffer.from(doc.output('arraybuffer'))
  return pdfBuffer
}